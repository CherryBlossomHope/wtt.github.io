import{_ as n,p as s,q as a,a1 as t}from"./framework-204010b2.js";const e={},p=t(`<h2 id="es13-新特性" tabindex="-1"><a class="header-anchor" href="#es13-新特性" aria-hidden="true">#</a> ES13 新特性</h2><h3 id="_1、类字段声明" tabindex="-1"><a class="header-anchor" href="#_1、类字段声明" aria-hidden="true">#</a> 1、类字段声明</h3><p>ES13之前,类字段只能在构造函数中声明,与许多其他语言不同,我们不能在类的最外层范围内声明或定义它们,ES13消除了这个限制</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Cars</span> <span class="token punctuation">{</span>
		color <span class="token operator">=</span> <span class="token string">&#39;真白&#39;</span><span class="token punctuation">;</span>
		age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token keyword">const</span> car1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car1<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//真白</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 22</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、私有方法和字段" tabindex="-1"><a class="header-anchor" href="#_2、私有方法和字段" aria-hidden="true">#</a> 2、私有方法和字段</h3><p>以前不能在类中声明私有成员,成员通常以下划线(_)为前缀,表示它是私有的,但仍然可以从类外部访问和修改 使用ES13 我们现在可以将私有字段和成员添加到类中,方法是在其前面加上＃号,试图从类外部访问它们会导致错误:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>#firstName <span class="token operator">=</span> <span class="token string">&quot;真白&quot;</span><span class="token punctuation">;</span>
#lastName <span class="token operator">=</span> <span class="token string">&quot;天天&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、顶层await-运算符" tabindex="-1"><a class="header-anchor" href="#_3、顶层await-运算符" aria-hidden="true">#</a> 3、顶层await 运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>	
<span class="token keyword">function</span> <span class="token function">setTimeoutAsync</span><span class="token punctuation">(</span><span class="token parameter">timeout</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>timeout<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">await</span> <span class="token function">setTimeoutAsync</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","ES13.html.vue"]]);export{r as default};
